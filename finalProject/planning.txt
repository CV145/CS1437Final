code needs to be kept separate, each  class needs to be able to be reused/recycled for various purposes


Method for writing a line to a file...
public void AppendLineToFile(String lineToAppend, String fileName) {}
- takes in a string which is the line to output to the file
- takes in another string for the name of the file
- checks if a file with the given file name already exists, if not create a new file
- writes to the file and when finished, opens it using Desktop class

---
todo:
- create the line to append to
- create a proper file name

DaySale_20195701
yyyy = 2019
mm = 57? should be 05
44..47.. minutes?
dd = 01

- create static class called Useful storing useful and reusable methods

- method returns a string of a formatted date
- takes in the date to format
- takes in a string of the desired formatPattern
private static String formatDate(Date dateToFormat, String formatPattern)


----

- method instantiates everything needed to get dates and calendars up and running
- method that refreshes the date just in case its almost midnight

----
method for saving binary info between sessions, saved maybe after a file is printed or something
- saves transactionNum for future use

method for loading binary info between sessions, called as soon as program begins
- loads transactionNum from a binary file, otherwise sets it to 1 if no file exists


--------
TODO - ask users what day to run a report in using a specified format

- method takes in a string, a required format pattern, and a returns a bool that indicates the string is in the specified format (format patterns could be mm/dd/yyyy, mm/yyyy, or yyyy) 


public static boolean CheckIfStringIsInFormat(String input, String formatPattern)
{
//format pattern... ".*/.*"
 return Pattern.matches(formatPattern, input);
}


- if the above method returns true, depending on which report is being run, tokenize the string (chosenDay) into mm, dd, yyyy

String mm, dd, yyyy;

public static String[] tokenizeString(String stringToTokenize, String delimiter)
{
 StringTokenizer tokenizer = new StringTokenizer(stringToTokenize, delimiter);
 ArrayList<String> tokens = new ArrayList<String>();
 while (tokenizer.hasMoreTokens())
 {
  tokens.add(tokenizer.nextToken());
 }
 return tokens;
}


String fileName = "daySale_" + yyyy + mm + dd + ".txt";

- look for a file with that name. If no file like that exists, log error: "No file under the name: " + fileName + ", was found. Please make sure the inputted date is in the requested format (ex: 04/23/2013) and that a transaction actually occured on that date."

public static Scanner getScannerForFile(String fileName) throws IOException
{
FileReader fileToOpen = null;

			try { fileToOpen = new FileReader(fileName); }
			catch(IOException io) { U.println("no file under the name: " + fileName + " was found. Please make sure the inputted date is in the requested format (ex: 04/12/2013) and that a transaction actually occured on that date."); } //currently opening file for writing to month file
			
			return new Scanner(fileToOpen);
}

- if the file exists, open it up for reading and put it in a scanner. Call TokenizeString() for each line in the file. Add up # of units sold.
- indeces 1, 2, 3 need to be converted to ints and stored in three seperate Integer array lists: SP191total, SP192total, and SP193total

afterwards add up each of these array lists and return the sum for each product

use String.format to create the line to write to the month file

create a new month file if it doesn't exist already, otherwise add to it

write the line to the month file, grabbing the requested day and the totals for each product

 Close the file.




